maxnodesL2020 <- length(paupL2020$tip.label)-1
maxnodesL2015 <- length(paupL2015$tip.label)-1
maxnodesR2014 <- length(paupR2014$tip.label)-1
maxnodesT2003 <- length(paupT2003$tip.label)-1
### propotion of resolved nodes = resolution metric
# paup
propnodepaupAH2006 <- paupAH2006$Nnode/maxnodesAH2006
propnodepaupA2019 <- paupA2019$Nnode/maxnodesA2019
propnodepaupCPRS2019 <- paupCPRS2019$Nnode/maxnodesCPRS2019
propnodepaupC2013 <- paupC2013$Nnode/maxnodesC2013
propnodepaupC2020 <- paupC2020$Nnode/maxnodesC2020
propnodepaupD2016 <- paupD2016$Nnode/maxnodesD2016
propnodepaupdL2020 <- paupdL2020$Nnode/maxnodesdL2020
propnodepaupE2014 <- paupE2014$Nnode/maxnodesE2014
propnodepaupFM2012 <- paupFM2012$Nnode/maxnodesFM2012
propnodepaupL2020 <- paupL2020$Nnode/maxnodesL2020
propnodepaupL2015 <- paupL2015$Nnode/maxnodesL2015
propnodepaupR2014 <- paupR2014$Nnode/maxnodesR2014
propnodepaupT2003 <- paupT2003$Nnode/maxnodesT2003
# morphy
propnodemorphyAH2006 <- morphyAH2006$Nnode/maxnodesAH2006
propnodemorphyA2019 <- morphyA2019$Nnode/maxnodesA2019
propnodemorphyCPRS2019 <- morphyCPRS2019$Nnode/maxnodesCPRS2019
propnodemorphyC2013 <- morphyC2013$Nnode/maxnodesC2013
propnodemorphyC2020 <- morphyC2020$Nnode/maxnodesC2020
propnodemorphyD2016 <- morphyD2016$Nnode/maxnodesD2016
propnodemorphydL2020 <- morphydL2020$Nnode/maxnodesdL2020
propnodemorphyE2014 <- morphyE2014$Nnode/maxnodesE2014
propnodemorphyFM2012 <- morphyFM2012$Nnode/maxnodesFM2012
propnodemorphyL2020 <- morphyL2020$Nnode/maxnodesL2020
propnodemorphyL2015 <- morphyL2015$Nnode/maxnodesL2015
propnodemorphyR2014 <- morphyR2014$Nnode/maxnodesR2014
propnodemorphyT2003 <- morphyT2003$Nnode/maxnodesT2003
# ana
propnodeanaAH2006 <- anaAH2006$Nnode/maxnodesAH2006
propnodeanaA2019 <- anaA2019$Nnode/maxnodesA2019
propnodeanaC2013 <- anaC2013$Nnode/maxnodesC2013
propnodeanaC2020 <- anaC2020$Nnode/maxnodesC2020
propnodeanaD2016 <- anaD2016$Nnode/maxnodesD2016
propnodeanadL2020 <- anadL2020$Nnode/maxnodesdL2020
propnodeanaE2014 <- anaE2014$Nnode/maxnodesE2014
propnodeanaFM2012 <- anaFM2012$Nnode/maxnodesFM2012
propnodeanaL2020 <- anaL2020$Nnode/maxnodesL2020
propnodeanaT2003 <- anaT2003$Nnode/maxnodesT2003
inappdist <- read.csv("Resolution by distance.csv")
corInappPropXRF <- lapply(split(inappdist, inappdist$Programme), function(x)
cor.test(x$Proportion.of.inapplicable, x$Robinson.Foulds.distance, method = "spearman"))
corInappPropXRF
cor.test(inappdist$Robinson.Foulds.distance, inappdist$Proportion.of.inapplicable)
cor.test(inappdist$Robinson.Foulds.distance, inappdist$Proportion.of.inapplicable, method = "spearman")
propnodemorphyCPRS2019
propnodemorphyL2015
propnodemorphyR2014
##### is there a correlation between inapplicable count/proportion and the magnitude of the distance from PAUP? ####
inappdist <- read.csv("Resolution by distance.csv")
shapiro.test(inappdist$Robinson.Foulds.distance) # normal
shapiro.test(inappdist$Quartet.distance) # normal
### inapplicable proportion
shapiro.test(inappdist$Proportion.of.inapplicable) # non-normal
# use non-parametric test
corInappPropXRF <- lapply(split(inappdist, inappdist$Programme), function(x)
cor.test(x$Proportion.of.inapplicable, x$Robinson.Foulds.distance, method = "spearman"))
corInappPropXRF
corInappPropXQu <- lapply(split(inappdist, inappdist$Programme), function(x)
cor.test(x$Proportion.of.inapplicable, x$Quartet.distance, method = "spearman"))
corInappPropXQu
plotInappPropXRF <- ggplot(inappdist) +
geom_point(aes(Proportion.of.inapplicable, Robinson.Foulds.distance, colour = Programme), size = 2.5) +
labs(x = "Proportion of inapplicable data", y = "Normalised Robinson-Foulds distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
plotInappPropXQu <- ggplot(inappdist) +
geom_point(aes(Proportion.of.inapplicable, Quartet.distance, colour = Programme), size = 2.5) +
labs(x = "Proportion of inapplicable data", y = "Normalised quartet distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
plotsInappPropxDistance <- plot_grid(plotInappPropXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappPropXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
labels = "AUTO", nrow = 1, ncol = 2)
legendInappPropxDistance <- get_legend(plotInappPropXQu +
theme(legend.position = "bottom")+
guides(colour = guide_legend(nrow = 1)))
pdf("Figures/is there a correlation between inapp proportion and magnitude of the distance from paup.pdf", 8, 5.83)
plot_grid(plotsInappPropxDistance, legendInappPropxDistance, ncol = 1, rel_heights = c(1,0.1))
dev.off()
### inapplicable count
shapiro.test(inappdist$Inapplicable.count) # non-normal
# use non-parametric test
corInappCountXRF <- lapply(split(inappdist, inappdist$Programme), function(x)
cor.test(x$Inapplicable.count, x$Robinson.Foulds.distance, method = "spearman"))
corInappCountXRF
corInappCountXRF <- lapply(split(inappdist, inappdist$Programme), function(x)
cor.test(x$Robinson.Foulds.distance, x$Inapplicable.count, method = "spearman"))
corInappCountXRF
corInappCountXQu <- lapply(split(inappdist, inappdist$Programme), function(x)
cor.test(x$Inapplicable.count, x$Quartet.distance, method = "spearman"))
corInappCountXQu
plotInappCountXRF <- ggplot(inappdist) +
geom_point(aes(Inapplicable.count, Robinson.Foulds.distance, colour = Programme), size = 2.5) +
labs(x = "Inapplicable count", y = "Normalised Robinson-Foulds distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
plotInappCountXQu <- ggplot(inappdist) +
geom_point(aes(Inapplicable.count, Quartet.distance, colour = Programme), size = 2.5) +
labs(x = "Inapplicable count", y = "Normalised quartet distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
plotsInappCountxDistance <- plot_grid(plotInappCountXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappCountXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
labels = "AUTO", nrow = 1, ncol = 2)
legendInappCountxDistance <- get_legend(plotInappCountXQu +
theme(legend.position = "bottom")+
guides(colour = guide_legend(nrow = 1)))
pdf("Figures/is there a correlation between inapp count and magnitude of the distance from paup.pdf", 8, 5.83)
plot_grid(plotsInappCountxDistance, legendInappCountxDistance, ncol = 1, rel_heights = c(1,0.1))
dev.off()
plot_grid(plotsInappCountxDistance, legendInappCountxDistance, ncol = 1, rel_heights = c(1,0.1))
plot_grid(plotsInappPropxDistance, legendInappPropxDistance, ncol = 1, rel_heights = c(1,0.1))
plotInappPropXQu <- ggplot(inappdist) +
geom_point(aes(Proportion.of.inapplicable, Quartet.distance, colour = Programme), size = 2.5) +
labs(x = "Proportion of
inapplicable data", y = "Normalised quartet distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
plot_grid(plotsInappPropxDistance, legendInappPropxDistance, ncol = 1, rel_heights = c(1,0.1))
plotInappPropXQu <- ggplot(inappdist) +
geom_point(aes(Proportion.of.inapplicable, Quartet.distance, colour = Programme), size = 2.5) +
labs(x = "Proportion of
inapplicable data", y = "Normalised quartet distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
plot_grid(plotsInappPropxDistance, legendInappPropxDistance, ncol = 1, rel_heights = c(1,0.1))
plotInappPropXQu
plotInappPropXRF <- ggplot(inappdist) +
geom_point(aes(Proportion.of.inapplicable, Robinson.Foulds.distance, colour = Programme), size = 2.5) +
labs(x = "Proportion of
inapplicable data", y = "Normalised Robinson-Foulds distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
plotInappPropXQu <- ggplot(inappdist) +
geom_point(aes(Proportion.of.inapplicable, Quartet.distance, colour = Programme), size = 2.5) +
labs(x = "Proportion of
inapplicable data", y = "Normalised quartet distance") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
plotsInappPropxDistance <- plot_grid(plotInappPropXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappPropXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
labels = "AUTO", nrow = 1, ncol = 2)
legendInappPropxDistance <- get_legend(plotInappPropXQu +
theme(legend.position = "bottom")+
guides(colour = guide_legend(nrow = 1)))
plota <- plot_grid(plotsInappPropxDistance, legendInappPropxDistance, ncol = 1, rel_heights = c(1,0.1))
plotb <- plot_grid(plotsInappCountxDistance, legendInappCountxDistance, ncol = 1, rel_heights = c(1,0.1))
plot_grid(plotsInappPropxDistance, plotsInappCountxDistance, ncol = 2, rel_widths = 0.5)
plot_grid(plotInappPropXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappPropXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappCountXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappCountXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
labels = "AUTO", nrow = 2, ncol = 2)
allplots <- plot_grid(plotInappPropXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappPropXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappCountXRF + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
plotInappCountXQu + theme(legend.position = "none", axis.title.x = element_text(size = 11), axis.text = element_text(size = 10)),
labels = "AUTO", nrow = 2, ncol = 2)
plot_grid(allplots, legendInappCountxDistance, ncol = 1, rel_heights = c(1,0.1))
##### Analysis across data sets #####
setwd("~/Documents/Imperial/Morphological Character Hierarchies/Data")
library(ape)
library(ggplot2)
library(ggpubr)
library(cowplot)
library(tidyr)
library(dplyr)
library(data.table)
library(RColorBrewer)
palette <- wesanderson::wes_palette(name = "Chevalier1")
palette <- c(palette, "#25291C", "#E6E49F")
# PAUP* = palette[1]
# Morphy = palette[2]
# Anagallis = palette[3]
# PAUP* vs Morphy = palette[4]
# PAUP* vs Anagallis = palette[5]
# Morphy vs Anagallis = palette[6]
### Asher & Hoftreiter, 2006
# paup
paupAH2006 <- consensus(read.nexus("Asher & Hofreiter, 2006/Paup-A&H2006.tre"))
# morphy
morphyAH2006 <- consensus(read.nexus("Asher & Hofreiter, 2006/Morphy-A&H2006.tre"))
# ana
anaAH2006 <- consensus(read.nexus("Asher & Hofreiter, 2006/Anatrees-A&H2006.txt.nex"))
### Atkinson, 2019
# paup
paupA2019 <- read.nexus("Atkinson, 2019/Paupcontree-A2019.tre")
# morphy
morphyA2019 <- consensus(read.nexus("Atkinson, 2019/Morphytrees-A2019.tre"))
# ana
anaA2019 <- consensus(read.nexus("Atkinson, 2019/Anatrees-A2019.nex"))
### CPRS, 2019
# paup
paupCPRS2019 <- read.nexus("Chani-Posse & Ramirez-Salamanca, 2019/Paupcontree-CPRS2019.tre")
# morphy
morphyCPRS2019 <- read.nexus("Chani-Posse & Ramirez-Salamanca, 2019/Morphycontree-CPRS2019.tre")
### Claeson et al, 2013
# paup
paupC2013 <- read.nexus("Claeson et al, 2013/Paupcontree-C2013.tre")
# morphy
morphyC2013 <- read.nexus("Claeson et al, 2013/Morphycontree-C2013.tre")
# ana
anaC2013 <- consensus(read.nexus("Claeson et al, 2013/Anatrees-C2013.nex"))
### Cloutier et al, 2020
# paup
paupC2020 <- read.nexus("Cloutier et al, 2020/Paupcontree-C2020.tre")
# morphy
morphyC2020 <- read.nexus("Cloutier et al, 2020/Morphycontree-C2020.tre")
# ana
anaC2020 <- consensus(read.nexus("Cloutier et al, 2020/Anatrees-C2020.nex"))
### Davesne et al, 2016
# paup
paupD2016 <- consensus(read.nexus("Davesne et al, 2016/Paup-D2016.tre"))
# morphy
morphyD2016 <- consensus(read.nexus("Davesne et al, 2016/Morphy-D2016.tre"))
# ana
anaD2016 <- consensus(read.nexus("Davesne et al, 2016/Anatrees-D2016.nex"))
### de Lavigerie et al, 2020
# paup
paupdL2020 <- read.nexus("de Lavigerie et al, 2020/Paupcontree-dL2020.tre")
# morphy
morphydL2020 <- read.nexus("de Lavigerie et al, 2020/Morphycontree-dL2020.tre")
# ana
anadL2020 <- consensus(read.nexus("de Lavigerie et al, 2020/Anatrees-dL2020.txt.nex"))
### Evans et al, 2014
# paup
paupE2014 <- read.nexus("Evans et al, 2014/Paupcontree-E2014.tre")
# morphy
morphyE2014 <- read.nexus("Evans et al, 2014/Morphycontree-E2014.tre")
# ana
anaE2014 <- consensus(read.nexus("Evans et al, 2014/Anatrees-E2014.txt.nex"))
### Fordyce & Marx, 2012
# paup
paupFM2012 <- read.nexus("Fordyce & Marx, 2012/Paupcontree-FM2012.tre")
# morphy
morphyFM2012 <- read.nexus("Fordyce & Marx, 2012/Morphycontree-FM2020.tre")
# ana
anaFM2012 <- consensus(read.nexus("Fordyce & Marx, 2012/Anatrees-FM2012.txt.nex"))
### Lehtonen et al, 2020
# paup
paupL2020 <- read.nexus("Lehtonen, 2020/Paupcontree-L2020.tre")
# morphy
morphyL2020 <- read.nexus("Lehtonen, 2020/Morphycontree-L2020.tre")
# ana
anaL2020 <- consensus(read.nexus("Lehtonen, 2020/Anatrees-L2020.nex"))
### Lihoreau et al, 2015
# paup
paupL2015 <- read.nexus("Lihoreau et al, 2015/Paupcontree-L2015.tre")
# morphy
morphyL2015 <- read.nexus("Lihoreau et al, 2015/Morphycontree-L2015.tre")
### Rose, 2014
# paup
paupR2014 <- read.nexus("Rose et al, 2014/Paupcontree-R2014.tre")
# morphy
morphyR2014 <- read.nexus("Rose et al, 2014/Morphycontree-R2014.tre")
### Takahashi, 2003
# paup
paupT2003 <- read.nexus("Takahashi, 2003/Paupcontree-T2003.tre")
# morphy
morphyT2003 <- read.nexus("Takahashi, 2003/Morphycontree-T2003.tre")
# ana
anaT2003 <- consensus(read.nexus("Takahashi, 2003/Anatrees-T2003.nex"))
#### Resolution metric ####
### max nodes
maxnodesAH2006 <- length(paupAH2006$tip.label)-1
maxnodesA2019 <- length(paupA2019$tip.label)-1
maxnodesCPRS2019 <- length(paupCPRS2019$tip.label)-1
maxnodesC2013 <- length(paupC2013$tip.label)-1
maxnodesC2020 <- length(paupC2020$tip.label)-1
maxnodesD2016 <- length(paupD2016$tip.label)-1
maxnodesdL2020 <- length(paupdL2020$tip.label)-1
maxnodesE2014 <- length(paupE2014$tip.label)-1
maxnodesFM2012 <- length(paupFM2012$tip.label)-1
maxnodesL2020 <- length(paupL2020$tip.label)-1
maxnodesL2015 <- length(paupL2015$tip.label)-1
maxnodesR2014 <- length(paupR2014$tip.label)-1
maxnodesT2003 <- length(paupT2003$tip.label)-1
### propotion of resolved nodes = resolution metric
# paup
propnodepaupAH2006 <- paupAH2006$Nnode/maxnodesAH2006
propnodepaupA2019 <- paupA2019$Nnode/maxnodesA2019
propnodepaupCPRS2019 <- paupCPRS2019$Nnode/maxnodesCPRS2019
propnodepaupC2013 <- paupC2013$Nnode/maxnodesC2013
propnodepaupC2020 <- paupC2020$Nnode/maxnodesC2020
propnodepaupD2016 <- paupD2016$Nnode/maxnodesD2016
propnodepaupdL2020 <- paupdL2020$Nnode/maxnodesdL2020
propnodepaupE2014 <- paupE2014$Nnode/maxnodesE2014
propnodepaupFM2012 <- paupFM2012$Nnode/maxnodesFM2012
propnodepaupL2020 <- paupL2020$Nnode/maxnodesL2020
propnodepaupL2015 <- paupL2015$Nnode/maxnodesL2015
propnodepaupR2014 <- paupR2014$Nnode/maxnodesR2014
propnodepaupT2003 <- paupT2003$Nnode/maxnodesT2003
# morphy
propnodemorphyAH2006 <- morphyAH2006$Nnode/maxnodesAH2006
propnodemorphyA2019 <- morphyA2019$Nnode/maxnodesA2019
propnodemorphyCPRS2019 <- morphyCPRS2019$Nnode/maxnodesCPRS2019
propnodemorphyC2013 <- morphyC2013$Nnode/maxnodesC2013
propnodemorphyC2020 <- morphyC2020$Nnode/maxnodesC2020
propnodemorphyD2016 <- morphyD2016$Nnode/maxnodesD2016
propnodemorphydL2020 <- morphydL2020$Nnode/maxnodesdL2020
propnodemorphyE2014 <- morphyE2014$Nnode/maxnodesE2014
propnodemorphyFM2012 <- morphyFM2012$Nnode/maxnodesFM2012
propnodemorphyL2020 <- morphyL2020$Nnode/maxnodesL2020
propnodemorphyL2015 <- morphyL2015$Nnode/maxnodesL2015
propnodemorphyR2014 <- morphyR2014$Nnode/maxnodesR2014
propnodemorphyT2003 <- morphyT2003$Nnode/maxnodesT2003
# ana
propnodeanaAH2006 <- anaAH2006$Nnode/maxnodesAH2006
propnodeanaA2019 <- anaA2019$Nnode/maxnodesA2019
propnodeanaC2013 <- anaC2013$Nnode/maxnodesC2013
propnodeanaC2020 <- anaC2020$Nnode/maxnodesC2020
propnodeanaD2016 <- anaD2016$Nnode/maxnodesD2016
propnodeanadL2020 <- anadL2020$Nnode/maxnodesdL2020
propnodeanaE2014 <- anaE2014$Nnode/maxnodesE2014
propnodeanaFM2012 <- anaFM2012$Nnode/maxnodesFM2012
propnodeanaL2020 <- anaL2020$Nnode/maxnodesL2020
propnodeanaT2003 <- anaT2003$Nnode/maxnodesT2003
read.csv("Resolution by distance.csv")
resbydist <- read.csv("Resolution by distance.csv")
View(resbydist)
#### all: is there a correlation between resolution and distance from paup? ####
# x-axis = resolution
# y-axis = distance from paup
resbydist <- read.csv("Resolution by distance.csv")
## correlation test
# is resolution normally distributed?
tapply(resbydist$Resolution, resbydist$Programme, shapiro.test) # yes
# is distance from paup normally distributed?
tapply(resbydist$Robinson.Foulds.distance, resbydist$Programme, shapiro.test) # yes
tapply(resbydist$Quartet.distance, resbydist$Programme, shapiro.test) # yes
# correlation tests
corresxtc <- lapply(split(resbydist, resbydist$Programme), function(x)
cor.test(x$Resolution, x$Tree.contradiction))
# correlation tests
corresxrf <- lapply(split(resbydist, resbydist$Programme), function(x)
cor.test(x$Resolution, x$Robinson.Foulds.distance))
corresxrf
corresxqd <- lapply(split(resbydist, resbydist$Programme), function(x)
cor.test(x$Resolution, x$Quartet.distance, ))
corresxqd
tcres <- ggplot(resbydist) +
geom_point(aes(Resolution, Tree.contradiction, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Tree.contradiction, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Normalised tree contradiction from PAUP*") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
rfres <- ggplot(resbydist) +
geom_point(aes(Resolution, Robinson.Foulds.distance, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Robinson.Foulds.distance, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Normalised Robinson-Foulds distance from PAUP*") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
qdres <- ggplot(resbydist) +
geom_point(aes(Resolution, Quartet.distance, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Quartet.distance, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Normlised quartet distance from PAUP*") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
distresplots <- plot_grid(tcres + theme(legend.position = "none"),
rfres + theme(legend.position = "none"),
qdres + theme(legend.position = "none"),
labels = "AUTO", nrow = 1, ncol = 3)
distreslegend <- get_legend(qdres +
theme(legend.position = "bottom")+
guides(colour = guide_legend(nrow = 1)))
pdf("Figures/is there a correlation between resolution and distance from paup?.pdf", 8, 5.83)
plot_grid(distresplots, distreslegend, ncol = 1, rel_heights = c(1,0.1))
dev.off()
rfres <- ggplot(resbydist) +
geom_point(aes(Resolution, Robinson.Foulds.distance, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Robinson.Foulds.distance, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Normalised Robinson-Foulds distance from PAUP*") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
qdres <- ggplot(resbydist) +
geom_point(aes(Resolution, Quartet.distance, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Quartet.distance, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Normlised quartet distance from PAUP*") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2])) +
theme(legend.box = "horizontal", legend.position = "top")
distresplots <- plot_grid(rfres + theme(legend.position = "none"),
qdres + theme(legend.position = "none"),
labels = "AUTO", nrow = 1, ncol = 2)
distreslegend <- get_legend(qdres +
theme(legend.position = "bottom")+
guides(colour = guide_legend(nrow = 1)))
pdf("Figures/is there a correlation between resolution and distance from paup?.pdf", 8, 5.83)
plot_grid(distresplots, distreslegend, ncol = 1, rel_heights = c(1,0.1))
dev.off()
#### is there a correlation between inapp proportion/count and resolution? ####
inappres <- read.csv("Resolution by distance.csv")
## correlation tests
# is resolution normally distributed?
tapply(inappres$Resolution, inappres$Programme, shapiro.test) # yes
# are inapp data normally distributed?
tapply(inappres$Inapplicable.count, inappres$Programme, shapiro.test)
tapply(inappres$Proportion.of.inapplicable, inappres$Programme, shapiro.test)
corinappcxres <- lapply(split(resbydist, resbydist$Programme), function(x)
cor.test(x$Resolution, x$Inapplicable.count))
corinappcxres
corinapppropxres <- lapply(split(resbydist, resbydist$Programme), function(x)
cor.test(x$Resolution, x$Proportion.of.inapplicable))
corinapppropxres
inappcres <- ggplot(inappres) +
geom_point(aes(Resolution, Inapplicable.count, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Inapplicable.count, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Inapplicable count") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
inapppropres <- ggplot(inappres) +
geom_point(aes(Resolution, Proportion.of.inapplicable, colour = Programme), size = 2) +
geom_smooth(aes(Resolution, Proportion.of.inapplicable, colour = Programme), method = "lm",
fullrange=T, se = F, size = 0.75) +
labs(y = "Proportion of inapplicable data") +
theme_pubr() +
color_palette(palette = c(palette[3], palette[2]))
inappresplots <- plot_grid(inappcres + theme(legend.position = "none"),
inapppropres + theme(legend.position = "none"),
labels = "AUTO", nrow = 1, ncol = 2)
inappreslegend <- get_legend(inapppropres +
theme(legend.position = "bottom")+
guides(colour = guide_legend(nrow = 1)))
pdf("Figures/is there a correlation between resolution and inapp.pdf", 8, 5.83)
plot_grid(inappresplots, inappreslegend, ncol = 1, rel_heights = c(1,0.1))
dev.off()
study <- c("AH2006",
"A2019",
"CPRS2019",
"C2013",
"C2020",
"D2016",
"dL2020",
"E2014",
"FM2012",
"L2020",
"L2015",
"R2014",
"T2003")
paupres <- c(propnodepaupAH2006,
propnodepaupA2019,
propnodepaupCPRS2019,
propnodepaupC2013,
propnodepaupC2020,
propnodepaupD2016,
propnodepaupdL2020,
propnodepaupE2014,
propnodepaupFM2012,
propnodepaupL2020,
propnodepaupL2015,
propnodepaupR2014,
propnodepaupT2003)
morphyres <- c(propnodemorphyAH2006,
propnodemorphyA2019,
propnodemorphyCPRS2019,
propnodemorphyC2013,
propnodemorphyC2020,
propnodemorphyD2016,
propnodemorphyL2020,
propnodemorphyE2014,
propnodemorphyFM2012,
propnodemorphyL2020,
propnodemorphyL2015,
propnodemorphyR2014,
propnodemorphyT2003)
propnodeanaCPRS2019 <- NA
propnodeanaL2015 <- NA
propnodeanaR2014 <- NA
anares <- c(propnodeanaAH2006,
propnodeanaA2019,
propnodeanaCPRS2019,
propnodeanaC2013,
propnodeanaC2020,
propnodeanaD2016,
propnodeanaL2020,
propnodeanaE2014,
propnodeanaFM2012,
propnodeanaL2020,
propnodeanaL2015,
propnodeanaR2014,
propnodeanaT2003)
resbyprogramme <- as.data.frame(study)
resbyprogramme$paupres <- paupres
resbyprogramme$morphyres <- morphyres
resbyprogramme$anares <- anares
colnames(resbyprogramme) <- c("Study", "PAUP*", "Morphy", "Anagallis")
resbyprogramme <- pivot_longer(resbyprogramme, cols = c("PAUP*", "Morphy", "Anagallis"),
names_to = "Programme", values_to = "Resolution")
pdf("Figures/is there a difference in the proprotion of resolved nodes.pdf", 8, 5.83)
ggplot(resbyprogramme) +
geom_col(aes(Study, Resolution, fill = Programme), position = "dodge") +
theme_pubr() +
fill_palette(palette = c(palette[3], palette[2], palette[1]))
dev.off()
