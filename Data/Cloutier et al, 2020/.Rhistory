trees2 <- rmtree(number.treesm number.tips, br = NULL, rooted = F)
# apply difference.function to the list of trees and calculate the mean value
result <- mean(unlist(mapply(difference.function, trees1, trees2, SIMPLIFY = F)))
# return the normalisation value
return(result)
}
random.comparisons <- function(number.tips, number.trees, difference.function) {
# simulate two times the number of trees with no branch length
trees1 <- rmtree(number.trees, number.tips, br = NULL, rooted = F)
trees2 <- rmtree(number.trees, number.tips, br = NULL, rooted = F)
# apply difference.function to the list of trees and calculate the mean value
result <- mean(unlist(mapply(difference.function, trees1, trees2, SIMPLIFY = F)))
# return the normalisation value
return(result)
}
random.comparisons(50, 2)
library(phangorn)
random.comparisons(50, 2, treedist)
random.comparisons(50, 2, treedist)
random.comparisons(50, 2, SPR.dist())
random.comparisons(50, 2, SPR.dist
)
library(paleotree)
random.comparisons(50, 2, treeContradiction())
random.comparisons(50, 2, treeContradiction
)
random.comparisons(50, 8, treeContradiction)
random.comparisons(50, 50, treeContradiction)
random.comparisons(50, 100, treeContradiction)
##### ggtern #####
library(ggtern)
library(Ternary)
# https://cran.r-project.org/web/packages/Ternary/vignettes/Ternary.html
TernaryPlot()
# https://cran.r-project.org/web/packages/Ternary/vignettes/Ternary.html
par(mar=c(0,0,0,0))
TernaryPlot()
TernaryPlot(point = "up")
TernaryPlot(point = "down")
TernaryPlot()
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness")
TernaryText(list(A=c(10,1,1,), B=c(1,10,1), C=c(1,1,10)), font = 2)
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 2)
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 4)
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 3)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness")
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 2)
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 1)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness")
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 1)
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 5)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness")
TernaryText(list(A=c(10,1,1), B=c(1,10,1), C=c(1,1,10)), font = 5)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "solid")
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed",
)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9))
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white")
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6))
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6))
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6), # colour of ticks on the border
padding = 0.08) # internal margin of the plot
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6), # colour of ticks on the border
padding = 0.2) # internal margin of the plot
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6), # colour of ticks on the border
padding = 0.05) # internal margin of the plot
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6), # colour of ticks on the border
padding = 0.08) # internal margin of the plot
cols <- TernaryPointValues(rgb)
ColourTernary(cols, spectrum = NULL)
data_points <- list( # add data points
R = c(255, 0, 0),
O = c(240, 180, 52),
Y = c(210, 222, 102),
G = c(111, 222, 16),
B = c(25, 160, 243),
I = c(92, 12, 243),
V = c(225, 24, 208)
)
AddToTernary(PlottingFunction = points, coordinates = data_points)
AddToTernary(PlottingFunction = points, coordinates = data_points,
bg=vapply(data_points,
function (x) rgb(x[1], x[2], x[3], 128, maxColorValue=255),
character(1))
)
AddToTernary(PlottingFunction = points, coordinates = data_points,
bg=vapply(data_points,
function (x) rgb(x[1], x[2], x[3], 128, maxColorValue=255),
character(1))
)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6), # colour of ticks on the border
padding = 0.08) # internal margin of the plot
cols <- TernaryPointValues(rgb) # colour the background
ColourTernary(cols, spectrum = NULL)
data_points <- list( # add data points
R = c(255, 0, 0),
O = c(240, 180, 52),
Y = c(210, 222, 102),
G = c(111, 222, 16),
B = c(25, 160, 243),
I = c(92, 12, 243),
V = c(225, 24, 208)
)
AddToTernary(PlottingFunction = points, coordinates = data_points,
bg=vapply(data_points,
function (x) rgb(x[1], x[2], x[3], 128, maxColorValue=255),
character(1))
)
AddToTernary(PlottingFunction = points, coordinates = data_points, pch = 21,
bg=vapply(data_points,
function (x) rgb(x[1], x[2], x[3], 128, maxColorValue=255),
character(1))
)
AddToTernary(text, data_points)
AddToTernary(PlottingFunction = points, coordinates = data_points, pch = 21, cex=3,
bg=vapply(data_points, # colour the points in along a gradient or something
function (x) rgb(x[1], x[2], x[3], 128, maxColorValue=255),
character(1))
)
TernaryPlot(alab = "Aness", blab = "Bness", clab = "Cness",
lab.col = c("red","blue","darkgreen"), # colour for axis and tick labels
lab.cex = 0.8, # axis label size
grid.minor.lines = 0, # how many minor ticks
grid.lty = "dashed", #  line type of grid lines
col = rgb(0.9,0.9,0.9), # colour fill for the plot
grid.col = "white", # colour of grid lines
axis.col = rgb(0.6,0.6,0.6), # colour of the border
ticks.col = rgb(0.6,0.6,0.6), # colour of ticks on the border
padding = 0.08) # internal margin of the plot
cols <- TernaryPointValues(rgb) # colour the background
ColourTernary(cols, spectrum = NULL)
data_points <- list( # add data points
R = c(255, 0, 0),
O = c(240, 180, 52),
Y = c(210, 222, 102),
G = c(111, 222, 16),
B = c(25, 160, 243),
I = c(92, 12, 243),
V = c(225, 24, 208)
)
AddToTernary(PlottingFunction = points, coordinates = data_points, pch = 21, cex=3,
bg=vapply(data_points, # colour the points in along a gradient or something
function (x) rgb(x[1], x[2], x[3], 128, maxColorValue=255),
character(1))
)
AddToTernary(text, data_points, names(data_points), font=2)
library(ggplot2)
#### ggtern ####
set.seed(5)
constants <- c(0.3,0.5,0.7)
dfA <- data.frame(ix = c(1:n), x = runif(n), y = runif(n))
#### ggtern ####
n <- 5
set.seed(5)
constants <- c(0.3,0.5,0.7)
dfA <- data.frame(ix = c(1:n), x = runif(n), y = runif(n))
dfb <- cbind(dfA, data.frame(z = runif(n), id = "Facet Label"))
dfLabs <- data.frame(y = constants, x = 0.05, z = 1 - constants - 0.05)
View(dfb)
View(dfA)
ggtern(dfb, aes(x,y,z))
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"))
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points")) + # add points
geom_text(aes(label = ix, colour = "Labels"))
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 2)
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4)
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4) +
scale_color_manual(values = c("black", "red"))
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4) + # add text on top of the points
scale_color_manual(values = c("black", "red")) + # change point and text colours
labs(colour = "Series")
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4) + # add text on top of the points
scale_color_manual(values = c("black", "red")) + # change point and text colours
labs(colour = "Series") + # changes legend title (not sure why)
geom_Tline(Tintercept = constants)
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4) + # add text on top of the points
scale_color_manual(values = c("black", "red")) + # change point and text colours
labs(colour = "Series") + # changes legend title (not sure why)
geom_Tline(Tintercept = constants) + # adds lines
geom_label(dfLabs, aes(label = y))
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4) + # add text on top of the points
scale_color_manual(values = c("black", "red")) + # change point and text colours
labs(colour = "Series") + # changes legend title (not sure why)
geom_Tline(Tintercept = constants) + # adds lines
geom_label(data = dfLabs, mapping = aes(label = y))
View(dfLabs)
ggtern(dfb, aes(x,y,z)) +
geom_point(aes(colour = "Points"), size = 5) + # add points
geom_text(aes(label = ix, colour = "Labels"), size = 4) + # add text on top of the points
scale_color_manual(values = c("black", "red")) + # change point and text colours
labs(colour = "Series") + # changes legend title (not sure why)
geom_Tline(Tintercept = constants) + # adds lines
geom_label(data = dfLabs, mapping = aes(label = y)) + # adds labels
theme_legend_position("topright")
citation("paleotree")
help(package="paleotree")
library()
library(ape)
library(phangorn)
citation("phangorn")
citation("Quartet")
ape::read.nexus("Documents/Imperial/Morphological Character Hierarchies/Data/Lehtonen, 2020/Anatrees-L2020.nex")
a <- ape::read.nexus("Documents/Imperial/Morphological Character Hierarchies/Data/Lehtonen, 2020/Anatrees-L2020.nex")
View(a)
list.filter(a, Nnode == 45)
rlist::list.filter(a, Nnode == 45)
rlist::list.filter(a, Nnode == 44)
##### Clouter et al, 2020 #####
setwd("~/Documents/Imperial/Morphological Character Hierarchies/Data/Cloutier et al, 2020/")
library(ape)
library(distory)
library(phangorn)
library(phytools)
library(paleotree)
library(dplyr)
library(Quartet)
library(dispRity)
library(rlist)
library(ggpubr)
# paup
pauptrees <- read.nexus("Pauptrees-C2020.tre")
paup <- read.nexus("Paupcontree-C2020.tre")
paup <- unroot(paup)
pauptrees <- as.multiPhylo(pauptrees)
pauptrees <- unroot.multiPhylo(pauptrees)
# morphy
morphytrees <- read.nexus("Morphy-C2020.tre")
morphy <- read.nexus("Morphycontree-C2020.tre")
morphy <- unroot(morphy)
morphytrees <- list.take(morphytrees, 100)
morphytrees <- as.multiPhylo(morphytrees)
morphytrees <- unroot.multiPhylo(morphytrees)
# anagallis
anatrees <- read.nexus("Anatrees-C2020.nex")
ana <- consensus(anatrees)
ana <- unroot(ana)
anatrees <- list.filter(anatrees, Nnode == 40)
anatrees <- as.multiPhylo(anatrees)
anatrees <- unroot.multiPhylo(anatrees)
contreelist <- c(paup, morphy, ana)
treeslist <- c(pauptrees, morphytrees, anatrees)
#### RF ####
rf <- sapply(treeslist, function(x)
sapply(treeslist, RF.dist, tree1=x))
colnames(rf) <- rownames(rf) <- c(paste("Paup", 1:length(pauptrees), sep = ""),
paste("Morphy", 1:length(morphytrees), sep = ""),
paste("Anagallis", 1:length(anatrees), sep = ""))
rf <- as.data.frame(rf)
# paup-paup
pprf <- rf[1:96, 1:96]
pprf <- as.matrix(pprf)
pprf <- as.vector(pprf)
pprfquartiles <- quantile(pprf)
pprfmedian <- pprfquartiles[3]
# morphy-morphy
mmrf <- rf[97:196, 97:196]
mmrf <- as.matrix(mmrf)
mmrf <- as.vector(mmrf)
mmrfquartiles <- quantile(mmrf)
mmrfmedian <- mmrfquartiles[3]
# ana-ana
aarf <- rf[197:204, 197:204]
aarf <- as.matrix(aarf)
aarf <- as.vector(aarf)
aarfquartiles <- quantile(aarf)
aarfmedian <- aarfquartiles[3]
# paup morphy
pmrf <- rf[1:96, 97:196]
pmrf <- as.matrix(pmrf)
pmrf <- as.vector(pmrf)
# paup anagallis
parf <- rf[1:96, 197:204]
parf <- as.matrix(parf)
parf <- as.vector(parf)
# morphy anagallis
marf <- rf[97:196, 197:204]
marf <- as.matrix(marf)
marf <- as.vector(marf)
# median
rflist <- list(pmrf, parf, marf)
rfquartiles <- as.data.frame(sapply(rflist, quantile, na.rm = T))
colnames(rfquartiles) <- c("PAUP* vs Morphy", "PAUP* vs Anagallis", "Morphy vs Anagallis")
rfmedian <- rfquartiles[3,]
rfLQ <- rfquartiles[2,]
rfUQ <- rfquartiles[4,]
### normalise
random.comparisons.quantile <- function(number.tips, number.trees, difference.function) {
trees1 <- rmtree(number.trees, number.tips, br = NULL, rooted = F)
trees2 <- rmtree(number.trees, number.tips, br = NULL, rooted = F)
result <- quantile(unlist(mapply(difference.function, trees1, trees2, SIMPLIFY = F)))
return(result)
}
set.seed(12345)
randoRFquantile <- random.comparisons.quantile(Ntip(paup), 100, RF.dist)
randoRFmedian <- randoRFquantile[3]
randoRFLQ <- randoRFquantile[2]
randoRFUQ <- randoRFquantile[4]
normalisedRFmedian <- rfmedian/randoRFmedian
normalisedRFLQ <- rfLQ/randoRFLQ
normalisedRFUQ <- rfUQ/randoRFUQ
#### Quartet ####
qu <- sapply(treeslist, function(x)
sapply(treeslist, QuartetPoints, cf=x))
qu1 <- as.data.frame(qu)
quartets <- c("Unresolved", "Contradicted", "Consistent")
quartets <- rep(quartets, length(qu1))
qu2 <- cbind(quartets, qu1)
qu3 <- subset(qu2, quartets == "Contradicted")
qu3 <- qu3[,2:ncol(qu3)]
colnames(qu3) <- rownames(qu3) <- c(paste("Paup", 1:length(pauptrees), sep = ""),
paste("Morphy", 1:length(morphytrees), sep = ""),
paste("Anagallis", 1:length(anatrees), sep = ""))
qu3 <- as.data.frame(qu3)
qu4 <- data.matrix(qu3)
# paup-paup
ppqu <- qu4[1:96, 1:96]
ppqu <- as.matrix(ppqu)
ppqu <- as.vector(ppqu)
ppququartiles <- quantile(ppqu)
ppqumedian <- ppququartiles[3]
# morphy-morphy
mmqu <- qu4[97:196, 97:196]
mmqu <- as.matrix(mmqu)
mmqu <- as.vector(mmqu)
mmququartiles <- quantile(mmqu)
mmqumedian <- mmququartiles[3]
# ana-ana
aaqu <- qu4[197:204, 197:204]
aaqu <- as.matrix(aaqu)
aaqu <- as.vector(aaqu)
aaququartiles <- quantile(aaqu)
aaqumedian <- aaququartiles[3]
# paup-morphy
pmqu <- qu4[1:96, 97:196]
pmqu <- as.matrix(pmqu)
pmqu <- as.vector(pmqu)
pmququartiles <- quantile(pmqu)
# paup-anagallis
paqu <- qu4[1:96, 197:204]
paqu <- as.matrix(paqu)
paqu <- as.vector(paqu)
paququartiles <- quantile(paqu)
# morphy-anagallis
maqu <- qu4[97:196, 197:204]
maqu <- as.matrix(maqu)
maqu <- as.vector(maqu)
maququartiles <- quantile(maqu)
# median and quartiles
qulist <- list(pmqu, paqu, maqu)
ququartiles <- as.data.frame(sapply(qulist, quantile, na.rm = T))
colnames(ququartiles) <- c("PAUP* vs Morphy", "PAUP* vs Anagallis", "Morphy vs Anagallis")
qumedian <- ququartiles[3,]
quLQ <- ququartiles[2,]
quUQ <- ququartiles[4,]
### normalise
random.Q.quantile <- function(number.tips, number.trees, difference.function) {
trees1 <- rmtree(number.trees, number.tips, br = NULL, rooted = F)
trees2 <- rmtree(number.trees, number.tips, br = NULL, rooted = F)
result <- mapply(difference.function, trees1, trees2, SIMPLIFY = F)
result <- bind_rows(result)
result <- sapply(result, quantile)
return(result)
}
set.seed(12345)
randoQquantile <- random.Q.quantile(Ntip(paup), 100, QuartetPoints)
randoQquantile <- randoQquantile[,2]
randoQmedian <- randoQquantile[3]
randoQLQ <- randoQquantile[2]
randoQUQ <- randoQquantile[4]
normalisedQmedian <- qumedian/randoQmedian
normalisedQLQ <- quLQ/randoQLQ
normalisedQUQ <- quUQ/randoQUQ
##### Visualisation #####
palette <- wesanderson::wes_palette(name = "Chevalier1")
palette <- c(palette, "#25291C", "#E6E49F")
# PAUP* = palette[1]
# Morphy = palette[2]
# Anagallis = palette[3]
# PAUP* vs Morphy = palette[4]
# PAUP* vs Anagallis = palette[5]
# Morphy vs Anagallis = palette[6]
comparepalette <- c(palette[6], palette[5], palette[4])
library(vegan)
library(cowplot)
# programme column
paupnames <- c("PAUP*")
paupnames <- rep(paupnames, length(pauptrees))
morphynames <- c("Morphy")
morphynames <- rep(morphynames, length(morphytrees))
ananames <- c("Anagallis")
ananames <- rep(ananames, length(anatrees))
Programme <- c(paupnames, morphynames, ananames)
### RF
mdsrf <- metaMDS(rf, distance = "euclidean", trymax = 999)
stressplot(mdsrf)
mdsrfpoints <- as.data.frame(mdsrf$points)
mdsrfpoints <- cbind(mdsrfpoints, Programme)
library(vegan)
library(cowplot)
# programme column
paupnames <- c("PAUP*")
paupnames <- rep(paupnames, length(pauptrees))
morphynames <- c("Morphy")
morphynames <- rep(morphynames, length(morphytrees))
ananames <- c("Anagallis")
ananames <- rep(ananames, length(anatrees))
Programme <- c(paupnames, morphynames, ananames)
### RF
mdsrf <- metaMDS(rf, distance = "euclidean", trymax = 999)
stressplot(mdsrf)
mdsrfpoints <- as.data.frame(mdsrf$points)
mdsrfpoints <- cbind(mdsrfpoints, Programme)
anosim(rf, grouping = Programme, distance = "euclidean")
a <- anosim(rf, grouping = Programme, distance = "euclidean")
plot(a)
plot(a, notch = FALSE)
plot(a)
boxplot(a, notch = F)
